
grammar {
start = resource-manifest

# Descriptive Properties
property-label = attribute label { text }
    
property-metadata =
    element metadata {
        property-label,
        property-mdvalue
    }
    
property-mdvalue =
    attribute value { text }
    |
    element value {
        attribute lang { text }?,
        attribute format { text }?,
        (text | allowed-html-tags)
    }+
    
## Spec allows only a, b, br, i, img, p, and span tags
allowed-html-tags =
    element p {
        mixed {
            element a { attribute href { text }, text }*
            & element b { text }*
            & element br { empty }*
            & element i { text }*
            & element img { attribute src { text } }*
        }
    }
    |
    element span { 
        mixed {
            element a { attribute href { text }, text }*
            & element b { text }*
            & element br { empty }*
            & element i { text }*
            & element img { attribute src { text } }*
        }
    }
    
property-description = element description { text }

property-thumbnail =
    element thumbnail {
        property-id,
        property-service
    }


# Rights and Licensing Properties
property-license = element license { property-uri }
    
property-attribution = element attribution { text }

property-logo = element logo { property-uri }


# Technical Properties   
property-id           = attribute id { xsd:anyURI }
property-context      = attribute context { xsd:anyURI }
property-profile      = attribute profile { xsd:anyURI }
property-uri          = attribute uri { xsd:anyURI }

## resource type is unnecessary in the XML model, 
## as it is represented by the element name.
property-resourceType = attribute type { 
    "sc:Collection"     |
    "sc:Manifest"       |  
    "sc:Sequence"       |
    "sc:Canvas"         |
    "sc:Annotation"     |
    "sc:AnnotationList" |
    "sc:Range"          |
    "sc:Layer"          |
    "sc:Content"        |
    "oa:Annotation"     |
    "dctypes:Image"     |
    "dctypes:Sound"
    } 
property-format           = attribute format { text }
property-height           = attribute height { text }
property-width            = attribute width  { text }
property-viewingDirection =
    attribute viewingDirection {
        "left-to-right" | "right-to-left" | "top-to-bottom" | "bottom-to-top"
    }    
property-viewingHint =
    attribute viewingHint {
        "individuals" | "paged" | "continuous" | "non-paged" | "top"
    }

# Linking Properties

property-related = 
    element related { 
        property-id
        & property-format
        & property-label
    }
property-service =
    element service {
        property-id,
        property-context,
        property-profile
    }
property-seeAlso =
    element seeAlso {
        attribute uri { text }
    }
property-within =
    element within {
        text | resource-layer
    }
property-startCanvas = attribute startCanvas { text }

# Open Annotation properties used in IIIF resources

property-motivation = attribute motivation { text }
property-on = attribute on { xsd:anyURI }

property-resource = 
    element resource {
    property-id
    & property-resourceType
    & property-format
    & property-service?
    & property-height?
    & property-width?
    }

# Property Sets

common-propertySet =
    property-viewingHint?
	& property-metadata*
	& property-description?
	& property-thumbnail?
	& property-attribution?
	& property-license?
	& property-logo?
	& property-seeAlso*
	& property-service?
	& property-related*
	& property-within*

resource-collection-propertySet = 
    common-propertySet
    & property-id
	& property-label
	
resource-manifest-propertySet =
	property-id
    & common-propertySet

	& property-viewingDirection?
	& property-label
	
resource-sequence-propertySet = 
	common-propertySet
	& property-id?
	& property-viewingDirection?
	& property-label?
	& property-startCanvas?

resource-canvas-propertySet = 
	common-propertySet
	& property-id
	& property-height
	& property-width
	& property-label

resource-annotation-propertySet = 
	common-propertySet
	& property-id?

resource-annotationList-propertySet = 
	common-propertySet
	& property-id

    
# Additional Resource Types
    
resource-range-propertySet = 
    common-propertySet
    & property-id
	& property-viewingDirection?
    & property-label
    & property-startCanvas?

resource-layer-propertySet = 
    common-propertySet
    & property-id
	& property-viewingDirection?
    & property-label

resource-content-propertySet =
    common-propertySet
    & property-id
    & property-label?
    
 
    

# Primary Resource Types

resource-collection = 
    element collection {
        resource-collection-propertySet
        & resource-collection*
        & resource-manifest+
	}
	
resource-manifest =
    element manifest {
        resource-manifest-propertySet
        & resource-sequence+
        & resource-range*
	}
	
resource-sequence = 
    element sequence {
        resource-sequence-propertySet
        & resource-canvas+
	}

resource-canvas = 
    element canvas {
        resource-canvas-propertySet    
        & resource-annotation+
        & resource-annotationList?
	}
	
resource-canvas-part =
    element canvas {
        attribute ref { xsd:anyURI },
        attribute x { xsd:int },
        attribute y { xsd:int },
        attribute w { xsd:int },
        attribute h { xsd:int }
}

resource-annotation = 
    element annotation {
        resource-annotation-propertySet	
        & property-motivation
        & property-resource
        & property-on
	}

resource-annotationList = 
    element annotationList {
        resource-annotationList-propertySet	
        & resource-annotation+
	}

    
# Additional Resource Types
    
resource-range = 
    element range {
        resource-range-propertySet
        & resource-canvas-part*
        & resource-range-ref*
	}
	
resource-range-ref =
    element range { attribute ref { xsd:anyURI } }

resource-layer = 
    element range {
        resource-layer-propertySet
        & resource-annotation+
    }

## An image resource is a kind of annotation.
## It must have a motivation property whose value
## must be "sc:painting". In addition, it has
## format, height, and width properties
resource-image_content =
    element annotation {
        resource-annotation-propertySet
        & attribute motivation { "sc:painting" }
        & property-format
        & property-height
        & property-width
    }
}